

key =  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





git add
    
    Перемещает изменения из рабочего каталога в промежуточную область. Это дает вам возможность подготовить снимок перед включением его в официальную историю.


git branch

    Эта команда является вашим универсальным инструментом администрирования ветвей. Он позволяет создавать изолированные среды разработки в одном репозитории.


git checkout

    Помимо проверки старых коммитов и старых версий файлов, git checkout также является средством навигации по существующим веткам. В сочетании с базовыми командами Git это способ работать над определенным направлением разработки.


git clean

    Удаляет неотслеживаемые файлы из рабочего каталога. Это логический аналог git reset, который (обычно) работает только с отслеживаемыми файлами.


git clone

    Создает копию существующего репозитория Git. Клонирование — наиболее распространенный способ получения разработчиками рабочей копии центрального репозитория.


git commit

    Делает подготовленный снимок и фиксирует его в истории проекта. В сочетании с git add это определяет базовый рабочий процесс для всех пользователей Git.


git commit --amend

    Передача флага --amend в git commit позволяет изменить самый последний коммит. Это очень полезно, когда вы забываете проиндексировать файл или опускаете важную информацию из сообщения о фиксации.


git config

    Удобный способ установить параметры конфигурации для вашей установки Git. Обычно вам нужно будет использовать это только сразу после установки Git на новой машине разработки.


git fetch

    При извлечении загружается ветка из другого репозитория вместе со всеми связанными с ней коммитами и файлами. Но он не пытается ничего интегрировать в ваш локальный репозиторий. Это дает вам возможность проверить изменения перед их объединением с вашим проектом.


git init

    Инициализирует новый репозиторий Git. Если вы хотите поставить проект под контроль версий, это первая команда, которую вам нужно выучить.


git log

    Позволяет изучить предыдущие версии проекта. Он предоставляет несколько вариантов форматирования для отображения зафиксированных снимков.



git merge

    Мощный способ интеграции изменений из разных ветвей. После разветвления истории проекта с помощью ветки git git merge позволяет снова собрать ее воедино.


git pull

    Pulling — это автоматизированная версия git fetch. Он загружает ветку из удаленного репозитория, а затем немедленно объединяет ее с текущей веткой. Это Git-эквивалент обновления svn.


git push

    Pushing — это противоположность извлечения (с некоторыми оговорками). Он позволяет вам переместить локальную ветку в другой репозиторий, что служит удобным способом публикации материалов. Это похоже на коммит svn, но он отправляет серию коммитов вместо одного набора изменений.


git rebase

    Перебазирование позволяет перемещать ветки, что помогает избежать ненужных коммитов слияния. Получающуюся в результате линейную историю часто гораздо легче понять и исследовать.


git rebase -in

    Флаг -i используется для начала интерактивного сеанса перебазирования. Это предоставляет все преимущества обычного перебазирования, но дает вам возможность добавлять, редактировать или удалять коммиты по ходу дела.


git reflog

    Git отслеживает обновления кончиков ветвей, используя механизм reflog. Это позволяет вам вернуться к наборам изменений, даже если на них не ссылается какая-либо ветка или тег.


git remote

    Удобный инструмент для администрирования удаленных подключений. Вместо передачи полного URL-адреса командам fetch, pull и push он позволяет использовать более содержательный ярлык.


git reset

    Отменяет изменения файлов в рабочем каталоге. Сброс позволяет очистить или полностью удалить изменения, которые не были отправлены в общедоступный репозиторий.


git revert

    Отменяет зафиксированный снимок. Когда вы обнаружите ошибочный коммит, возврат — это безопасный и простой способ полностью удалить его из базы кода.


git status

    Отображает состояние рабочего каталога и промежуточного моментального снимка. Вам нужно будет запустить это вместе с git add и git commit, чтобы точно увидеть, что будет включено в следующий снимок.


